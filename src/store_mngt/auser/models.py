"""gradient_infosys auser list of ORM models

	Generated by: django-admin startapp
	Last modified by: Wendirad Demelsh
"""
import datetime

from ckeditor.fields import RichTextField
from django.contrib.auth.models import (AbstractBaseUser, PermissionsMixin,
                                        UserManager)
from django.contrib.auth.validators import UnicodeUsernameValidator
from django.core.validators import MinValueValidator
from django.db import models
from django.utils.translation import gettext_lazy as _

from auser.validators import PhoneNumberValidator


class Address(models.Model):
    """
    An abstract class which represent composite attribute 'Address'
    for sub classes.
    """

    email = models.EmailField(
        _("email"),
        unique=True,
    )
    phone_number = models.CharField(
        _("phone number"),
        max_length=13,
        unique=True,
        validators=[PhoneNumberValidator()],
    )
    location = models.CharField(
        _("address"),
        max_length=200,
        blank=True,
        null=True,
        help_text=_("Physical location."),
    )
    po_box = models.CharField(_("P.O Box"), max_length=10, blank=True, null=True)

    class Meta:
        abstract = True


class AbstractUser(models.Model):
    """Abstract model need to user for both user and instructors"""

    class SexChoices(models.TextChoices):
        MALE = "M", _("MALE")
        FEMALE = "F", _("FEMALE")

    first_name = models.CharField(_("first name"), max_length=150)
    last_name = models.CharField(_("last name"), max_length=150)
    sex = models.CharField(_("Gender"), max_length=2, choices=SexChoices.choices)
    bio = RichTextField(
        _("Bio"), help_text=_("Tell us about your self"), null=True, blank=True
    )
    profile_picture = models.ImageField(
        _("Profile picture"), upload_to="profile_pictures/", default="default.svg"
    )
    date_joined = models.DateTimeField(_("date joined"), auto_now_add=True)

    class Meta:
        abstract = True

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

    def get_full_name(self):
        """Return the first_name plus the last_name, with a space in between."""
        full_name = f"{self.first_name} {self.last_name}"
        return full_name.strip()


class User(AbstractUser, AbstractBaseUser, PermissionsMixin, Address):
    """Custom user model used as primary user in the platform."""

    username_validator = UnicodeUsernameValidator()
    username = models.CharField(
        _("username"),
        max_length=150,
        unique=True,
        help_text=_(
            "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
        ),
        validators=[username_validator],
        error_messages={
            "unique": _("A user with that username already exists."),
        },
    )
    is_staff = models.BooleanField(
        _("staff status"),
        default=False,
        help_text=_("Designates whether the user can log into this admin site."),
    )
    is_active = models.BooleanField(
        _("active"),
        default=True,
        help_text=_(
            "Designates whether this user should be treated as active. "
            "Unselect this instead of deleting account"
        ),
    )

    objects = UserManager()

    USERNAME_FIELD = "username"
    EMAIL_FIELD = "email"
    REQUIRED_FIELDS = ["email", "phone_number", "sex"]

    class Meta:
        verbose_name = _("user")
        verbose_name_plural = _("users")
        db_table = "user"
        indexes = [
            models.Index(fields=["id"], name="user_id_idx"),
            models.Index(fields=["username"], name="user_username_idx"),
        ]
        permissions = [
            ("can_deactivate_user", "Can deactivate user"),
            ("can_activate_user", "Can activate user"),
            ("can_view_staff", "Can view staff"),
            ("can_change_staff", "Can change staff"),
            ("can_add_staff", "Can add staff"),
            ("can_delete_staff", "Can delete staff"),
            ("can_change_user_permissions", "Can change user permissions"),
        ]


class DepartmentHead(User):
    """Content creator are users mainly responsibly for creating contents."""

    class Meta:
        verbose_name = _("content creator")
        verbose_name_plural = _("content creators")
        db_table = "content_creator"
        permissions = [
            ("can_deactivate_content_creator", "Can deactivate content creator"),
            ("can_activate_content_creator", "Can activate content creator"),
        ]


class Student(User):
    """Student are users mainly responsible for learning."""

    class Meta:
        verbose_name = _("student")
        verbose_name_plural = _("students")
        db_table = "student"
        permissions = [
            ("can_deactivate_student", "Can deactivate student"),
            ("can_activate_student", "Can activate student"),
        ]


# class Instructor(Address, AbstractUser):
#     """Instractors are users mainly responsible for teaching."""

#     is_visible = models.BooleanField(
#         _("visible"),
#         default=True,
#         help_text=_("Designates whether this user should be visible to others."),
#     )
#     social_media_link = models.ManyToManyField(
#         "SocialMedia",
#         verbose_name=_("social media link"),
#         through="InstructorSocialMediaLink",
#     )

#     class Meta:
#         ordering = ["-date_joined"]
#         db_table = "instructor"
#         verbose_name = _("instructor")
#         verbose_name_plural = _("instructors")

#     @property
#     def created_on(self):
#         return self.date_joined


# class Experience(models.Model):
#     """Experience model for instructors"""

#     company_name = models.CharField(_("Company Name"), max_length=255)
#     company_location = models.CharField(_("Company Location"), max_length=255)
#     start_year = models.IntegerField(
#         _("start Year"), validators=[MinValueValidator(1950)]
#     )
#     end_year = models.IntegerField(
#         _("End Year"),
#         validators=[MinValueValidator(1950)],
#         blank=True,
#         null=True,
#         help_text=_("Leave blank if still working"),
#     )
#     job_title = models.CharField(_("Job Title"), max_length=255)
#     description = models.TextField(_("Description"), blank=True, null=True)
#     volunteer = models.BooleanField(_("Volunteer"), default=False)
#     instructor = models.ForeignKey(
#         Instructor,
#         verbose_name=_("instructor"),
#         on_delete=models.CASCADE,
#         related_name="experiences",
#     )
#     created_on = models.DateTimeField(_("Created On"), auto_now_add=True)
#     updated_on = models.DateTimeField(_("Updated On"), auto_now=True)

#     class Meta:
#         verbose_name = _("experience")
#         verbose_name_plural = _("experiences")

#     def __str__(self):
#         return f"{self.company_name} - {self.job_title}"



# class EducationBackground(models.Model):
#     """Education Background"""

#     institution_name = models.CharField(_("institution name"), max_length=255)
#     institution_location = models.CharField(_("institution location"), max_length=255)
#     degree_level = models.CharField(_("degree"), max_length=255)
#     major = models.CharField(_("major"), max_length=255)
#     start_year = models.IntegerField(
#         _("start Year"), validators=[MinValueValidator(1950)]
#     )
#     end_year = models.IntegerField(
#         _("End Year"),
#         validators=[MinValueValidator(1950)],
#         blank=True,
#         null=True,
#         help_text=_("Write expected year if still studying"),
#     )
#     description = models.TextField(_("description"), blank=True, null=True)
#     completed = models.BooleanField(_("completed"), default=True)
#     instructor = models.ForeignKey(
#         Instructor,
#         verbose_name=_("instructor"),
#         on_delete=models.CASCADE,
#         related_name="education_backgrounds",
#     )
#     created_on = models.DateTimeField(_("created on"), auto_now_add=True)
#     updated_on = models.DateTimeField(_("updated on"), auto_now=True)

#     class Meta:
#         verbose_name = _("education_background")
#         db_table = "education_background"
#         verbose_name_plural = _("education_backgrounds")

#     def __str__(self):
#         return f"{self.degree_level} {self.major}"


# class SocialMedia(models.Model):
#     """Social medias are used to link instructors to social media."""

#     name = models.CharField(_("name"), max_length=200, blank=True, null=True)
#     icon = models.ImageField(
#         _("icon"),
#         upload_to="social_media/",
#         blank=True,
#         null=True,
#         help_text=_("Upload icon for social media"),
#     )
#     url = models.URLField(
#         _("url"), blank=True, null=True, help_text=_("Link to social media")
#     )
#     created_on = models.DateTimeField(_("created on"), auto_now_add=True)
#     updated_on = models.DateTimeField(_("updated on"), auto_now=True)

#     class Meta:
#         verbose_name = _("social media")
#         verbose_name_plural = _("social media")

#     def __str__(self):
#         return f"{self.name}"

#     created_on = models.DateTimeField(_("created on"), auto_now_add=True)
#     updated_on = models.DateTimeField(_("updated on"), auto_now=True)

#     class Meta:
#         verbose_name = _("social_link")
#         verbose_name_plural = _("social_links")

#     def __str__(self):
#         return f"{self.name}"


# class InstructorSocialMediaLink(models.Model):
#     """Social media link for instructor."""

#     social_media = models.ForeignKey(SocialMedia, on_delete=models.CASCADE)
#     instructor = models.ForeignKey(
#         Instructor, related_name="social_media_links", on_delete=models.CASCADE
#     )
#     link = models.URLField(_("link"), max_length=200, blank=True, null=True)
#     created_on = models.DateTimeField(_("created on"), auto_now_add=True)
#     updated_on = models.DateTimeField(_("updated on"), auto_now=True)

#     class Meta:
#         verbose_name = _("social media link")
#         verbose_name_plural = _("social media links")
