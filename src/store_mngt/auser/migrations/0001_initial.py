# Generated by Django 3.2.12 on 2022-04-15 23:36

import auser.validators
import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('phone_number', models.CharField(max_length=13, unique=True, validators=[auser.validators.PhoneNumberValidator()], verbose_name='phone number')),
                ('location', models.CharField(blank=True, help_text='Physical location.', max_length=200, null=True, verbose_name='address')),
                ('po_box', models.CharField(blank=True, max_length=10, null=True, verbose_name='P.O Box')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('sex', models.CharField(choices=[('M', 'MALE'), ('F', 'FEMALE')], max_length=2, verbose_name='Gender')),
                ('bio', ckeditor.fields.RichTextField(blank=True, help_text='Tell us about your self', null=True, verbose_name='Bio')),
                ('profile_picture', models.ImageField(default='default.svg', upload_to='profile_pictures/', verbose_name='Profile picture')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting account', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
                'permissions': [('can_deactivate_user', 'Can deactivate user'), ('can_activate_user', 'Can activate user'), ('can_view_staff', 'Can view staff'), ('can_change_staff', 'Can change staff'), ('can_add_staff', 'Can add staff'), ('can_delete_staff', 'Can delete staff'), ('can_change_user_permissions', 'Can change user permissions')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('phone_number', models.CharField(max_length=13, unique=True, validators=[auser.validators.PhoneNumberValidator()], verbose_name='phone number')),
                ('location', models.CharField(blank=True, help_text='Physical location.', max_length=200, null=True, verbose_name='address')),
                ('po_box', models.CharField(blank=True, max_length=10, null=True, verbose_name='P.O Box')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('sex', models.CharField(choices=[('M', 'MALE'), ('F', 'FEMALE')], max_length=2, verbose_name='Gender')),
                ('bio', ckeditor.fields.RichTextField(blank=True, help_text='Tell us about your self', null=True, verbose_name='Bio')),
                ('profile_picture', models.ImageField(default='default.svg', upload_to='profile_pictures/', verbose_name='Profile picture')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_visible', models.BooleanField(default=True, help_text='Designates whether this user should be visible to others.', verbose_name='visible')),
            ],
            options={
                'verbose_name': 'instructor',
                'verbose_name_plural': 'instructors',
                'db_table': 'instructor',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='name')),
                ('icon', models.ImageField(blank=True, help_text='Upload icon for social media', null=True, upload_to='social_media/', verbose_name='icon')),
                ('url', models.URLField(blank=True, help_text='Link to social media', null=True, verbose_name='url')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on')),
            ],
            options={
                'verbose_name': 'social_link',
                'verbose_name_plural': 'social_links',
            },
        ),
        migrations.CreateModel(
            name='ContentCreator',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auser.user')),
            ],
            options={
                'verbose_name': 'content creator',
                'verbose_name_plural': 'content creators',
                'db_table': 'content_creator',
                'permissions': [('can_deactivate_content_creator', 'Can deactivate content creator'), ('can_activate_content_creator', 'Can activate content creator')],
            },
            bases=('auser.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auser.user')),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'db_table': 'student',
                'permissions': [('can_deactivate_student', 'Can deactivate student'), ('can_activate_student', 'Can activate student')],
            },
            bases=('auser.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InstructorSocialMediaLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, null=True, verbose_name='link')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_media_links', to='auser.instructor')),
                ('social_media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auser.socialmedia')),
            ],
            options={
                'verbose_name': 'social media link',
                'verbose_name_plural': 'social media links',
            },
        ),
        migrations.AddField(
            model_name='instructor',
            name='social_media_link',
            field=models.ManyToManyField(through='auser.InstructorSocialMediaLink', to='auser.SocialMedia', verbose_name='social media link'),
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255, verbose_name='Company Name')),
                ('company_location', models.CharField(max_length=255, verbose_name='Company Location')),
                ('start_year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1950)], verbose_name='start Year')),
                ('end_year', models.IntegerField(blank=True, help_text='Leave blank if still working', null=True, validators=[django.core.validators.MinValueValidator(1950)], verbose_name='End Year')),
                ('job_title', models.CharField(max_length=255, verbose_name='Job Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('volunteer', models.BooleanField(default=False, verbose_name='Volunteer')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Updated On')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='auser.instructor', verbose_name='instructor')),
            ],
            options={
                'verbose_name': 'experience',
                'verbose_name_plural': 'experiences',
            },
        ),
        migrations.CreateModel(
            name='EducationBackground',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(max_length=255, verbose_name='institution name')),
                ('institution_location', models.CharField(max_length=255, verbose_name='institution location')),
                ('degree_level', models.CharField(max_length=255, verbose_name='degree')),
                ('major', models.CharField(max_length=255, verbose_name='major')),
                ('start_year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1950)], verbose_name='start Year')),
                ('end_year', models.IntegerField(blank=True, help_text='Write expected year if still studying', null=True, validators=[django.core.validators.MinValueValidator(1950)], verbose_name='End Year')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('completed', models.BooleanField(default=True, verbose_name='completed')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_backgrounds', to='auser.instructor', verbose_name='instructor')),
            ],
            options={
                'verbose_name': 'education_background',
                'verbose_name_plural': 'education_backgrounds',
                'db_table': 'education_background',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['id'], name='user_id_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='user_username_idx'),
        ),
    ]
